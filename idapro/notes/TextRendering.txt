text rendering is basically a queue, where different parts of the game add text to the queue and then it all gets flushed in one go

2 types/queues of text to render
- type 1 - max 128 items - main text rendering queue
- type 2 - max 32 items - unsure of semantic difference to type 1, but seems to filter out characters differently, does not seem to make a difference in terms of aesthetic options

common pattern of setting up a text item is:
swrText_Translate	with a fmt string
sprintf			with some string constant into a buffer
swrText_CreateEntry*	with the buffer
- neither Translate or sprintf are required to add text to the queue
- sprintf often omitted, occasionally both are
- not sure exactly the role of Translate, but probably literally for swapping in language strings
- if so then it makes sense that sprintf only sometimes appears, for strings with no translation

racer has a bespoke string formatting system for setting font, color, etc.
- fn 0x42EC50 interprets: ~(b, f, F)
	- ~b = marks the string to be cut off later if anywhere in string
	- ~f = if at the start, selects font using char3 as index
		- CreateEntry will set this for you unless you set font arg to -1
		- use CreateEntry1 or CreateEntry2 for shorthand)
		- max value seems to be 6
		- font 0 seems to be the same as setting -1 in CreateEntry
		- fonts 1-3 seem to only be usable for numbers
	- ~F = same as ~f, but position and scale are halved
- and then fn 0x42E150 interprets: ~(0-9, b, c, k, n, o, p, r, s, t, ~)
	- ~0..9 = use preset color from index 0..9
		- col0 = 000000 (black)
		- col1 = FFFFFF (white)
		- col2 = 6EB4FF (blue)
		- col3 = FFFF9C (yellow)
		- col4 = 96FF96 (green)
		- col5 = FF6450 (red)
		- col6 = BC865E (brown)
		- col7 = 6E6E80 (gray) 
		- col8 = FFA7D1 (pink) 
		- col9 = 985EFF (purple)
	- ~b = all characters after will be skipped; code looks like it should only skip 1 tho
	- ~t = code looks like render '~' char, but nothing happens
	- ~k = toggle light outline
	- ~o = toggle heavy outline
	- ~s = toggle shadow; yes, these 3 can stack
	- ~p = reset outlines/shadow
	- ~c = center align
	- ~r = right align
	- ~n = interpret string length as y offset?
	- ~~ = do nothing?
- $ = copyright symbol in title screen text, doesn't seem to work for normal text tho
- ASCII characters above 150 are converted to another character via LUT at 0x4BFA11 (LUT keys at 0x4BF9C2, indices at 0x4BFA10)


CONSTANTS

0x50C750	current index/working slot for queue 1
0x50C758	current index/working slot for queue 2
0x50C764	?? current index/working slot for map dot queue?
0x50C0C4	?? item result from parsing subitem index (e.g. the 0 in '~f0'), maybe pointer
0x50C0AC	?? flag for rendering in hi-res mode (~Fn) in the next pass
0xE30380	array for storing type 1 strings; 128-byte items, 256 stride
0xE303A0	array for storing type 2 strings; 128-byte items, 256 stride, interleaved with type 1
0xE34860	array of type 1 positions; { i16, i16 }
0xE34660	array of type 2 positions; { i16, i16 }
0xE2B480	array of type 1 rgba values; { u8, u8, u8, u8 }
0xE343A0	array of type 2 rgba values; { u8, u8, u8, u8 }
0x450496  u8	value used to limit the type 2 queue size (32)
0x4C11F4	"DBG" text
0x4C0948	"CRD" text
0x4C484C	"LKJ" text
0x4C4848	"DJJ" text
0xE9A5E0    [20]i32	AI popup - ??; -1000 (0xFFFFFC18) default, may be used instead of 0xE9A720/0xE9A780, see fn_42C510
0xE9A640    [20]i32	AI popup - ??; -1000 (0xFFFFFC18) default, may be used instead of 0xE9A720/0xE9A780, see fn_42C510
0xE9A720    [20]i32	AI popup - ??; -1000 (0xFFFFFC18) default, used in calculation for value at same offset in 0xE9A7E0
0xE9A780    [20]i32	AI popup - ??; -1000 (0xFFFFFC18) default, used in calculation for value at same offset in 0xE9A7E0
0xE9A7E0    [20]f32	AI popup - ??; -1000 default/not rendering, see fn_42BE60 (update sprite depth values fn)
0xE9A840    [20]i32	AI popup - positions; -9999 (0xFFFFD8F1) = do not render


FUNCTIONS

0x407b00
char* swrText_GetKeyNameText(uint32_t id, char* str);

0x421120
int swrText_ParseRacerTab(char* filepath);

0x4212f0
int swrText_CmpRacerTab(char** a, char** b);

0x421330
void swrText_Shutdown(void);

0x421360
char* swrText_Translate(char* text);

0x4503E0 swrText_CreateEntry
core item for adding to the text queues, all other entry fns use this
*fn (x: i16, y: i16, r: u8, g: u8, b: u8, a: u8, str: [*:0]const u8, font: i32, entry2: i32) callconv(.C) void;

0x450530 swrText_CreateEntry1
core fn shorthand for making type 1 entries
*fn (x: i16, y: i16, r: u8, g: u8, b: u8, a: u8, str: [*:0]const u8) callconv(.C) void;

0x450560 swrText_CreateWhiteEntry1
macro for creating unformatted, white-colored type 1 entries
*fn (x: i16, y: i16, str: [*:0]const u8) callconv(.C) void;

0x450590 swrText_CreateWhiteFontEntry1
macro for white-colored font-selected type 1 entries
*fn (font: u32, x: i16, y: i16, str: [*:0]const u8) callconv(.C) void;

0x4505C0 swrText_CreateEntry2
core fn shorthand for making type 2 entries
*fn (x: i16, y: i16, r: u8, g: u8, b: u8, a: u8, str: [*:0]const u8) callconv(.C) void;

0x4505F0
macro for calling Translate with a fmt switch, before calling DrawTime3
*fn (x: i16, y: i16, time: f32, r: u32, g: u32, b: u32, a: u32, fmt: i32) callconv(.C) void;

0x450670 swrText_DrawTime2
formats a float as "ss.ss"/"m:ss.ss" and adds it as an unformatted type 1 item
*fn (x: i16, y: i16, time: f32, r: u32, g: u32, b: u32, a: u32) callconv(.C) void;

0x450760 swrText_DrawTime3
formats a float as "ss.sss"/"m:ss.sss" and adds it as an unformatted type 1 item
*fn (x: i16, y: i16, time: f32, r: u32, g: u32, b: u32, a: u32) callconv(.C) void;

0x450280
seems to be for processing type 1 text

0x450100 swrText_FlushQueue1
seems to be the fn that actually flushes the type 1 queue (called from 0x450280)

0x4502B0
seems to be for processing type 2 text

0x4501F0
seems to be the fn that actually flushes the type 2 queue (called from 0x4502B0)

0x483CB0
seems to be for finalizing text rendering, calls 0x450280 and 0x4502B0, 2 layers deep from GameLoop

0x44FCE0 swrText_NewNotification
used to spawn notification text, e.g. the text that appears when you input a cheat
*fn (str: [*:0]u8, duration: f32) callconv(.C) void;

0x44FF30 swrText_FlushMapQueue
called immediately after FlushQueue1 in ProcessQueue1
*fn () callconv(.C) void;

0x44FEF0 swrText_CreateMapEntry
max 190 map items
type: 0=you(X), 1=startline?(tealline), 2=opponent(yellowdot,map1), 3=opponent(blueX,map2)
*fn (type: u8, x: i16, y: i16) callconv(.C) void;

0x42C7A0 swrText_CreateScreenSpaceEntry
*fn (X:i16, Y:i16, R:u8, char G:u8, char B:u8, char A:u8, string:[*:0]u8) callconv(.C) void
- used only by fn_42C510 (draw AI position text)
- X,Y input converted from window coords to low res render system coords
    - e.g. if window size 1280x960, x=640 turns into 160 (x=640/1280*320)

void __cdecl sub_4173C0(int a1, __int16 x, __int16 y, char r, char g, char b, char a, const char *a8, int a9, int *a10, int a11)
- does some text processing, and oscillates flt_4B5D88 between 40.0 and 255.0, going twice as fast down as up

BOOL __cdecl swrText_CheckStringStartDebug_440990(_BYTE *a1, _BYTE *a2)
- fails if Debug Flag 0x4000 is off
- check if first 3 characters of string are equal
- used once to compare filename with DBG in Unk_Hang__43CEB0
- DBG effect unknown, seems to reset a timer

BOOL __cdecl swrText_CheckStringStart_4409D0(_BYTE *a1, _BYTE *a2)
- check if first 3 characters of string are equal
- used in a few places to compare filename with CRD, LKJ, DJJ
- LKJ spawns dewback in junkyard
- DJJ spawns a different animal in junkyard
- CRD effect unknown

void __cdecl Unk_swrText_MapSetCharacter_42EDC0(char Character)

void __cdecl Unk_swrText_MapDrawCharacter_42EEB0(int X, int Y, char DecorationMode)
- renders a single character for the map ('X', '.', etc)
- character is set externally
- X, Y coords depend on text resolution mode, normally lo-res
    - bug: map system doesn't reset this after Queue1 processes, so will be hi-res if last Queue1 item was hi
- DecorationMode = 's'=shadow, 'o'=heavy outline, 'f'=light outline, else no decoration; game uses 'p' (=none)

void __cdecl swrText_RenderSetColor_42D950(char r, char g, char b, char a)
void __cdecl swrText_RenderSetPos_42D910(__int16 x, __int16 y)
void __cdecl swrText_RenderString_42EC50(_BYTE *pString)
these 3 used in tandem to do the 'real' rendering, i.e.

void __cdecl Unk_swrText_DrawAlignedText__417540(int FontId, char *pStr, VEC_4_I32 *pAABB, int UnkFlags, char R, char G, char B, char A, int a9, VEC_4_I32 *pRegion, BOOL bAutoAlpha)
- doesn't purely align, some other implications due to the actual drawing being 
  an indirect call to another function
- flags
	@16  center horizontal
	@17  center vertical;  overridden by @16
	@18  center both;  overrides @16, @17
	@19  right align;  overridden by @16, @17, @18
	@20  indent 5 spaces;  overrides @21
	@21  indent 1 space
