if you overwrite the values in the finalized input arrays immediately after ProcessInput runs,
gameplay WILL be affected, but menuing etc. WILL NOT be affected

CONSTANTS


0x4B2944  BOOL		joystick enabled setting
0x4B2910  BOOL		?? force feedback enabled setting
0x4D79D0  BOOL		?? force feedback enabled setting backup (stored while joystick disabled)


0x4B2998  [16]i32	static array of indices mapping 0xE98EE4 menu buffer button array to 0xEC8840 btn final analog (buf_button[n] = btn_analog[map[n]])
			- 7,  6,  1,  0,  9, -1, -1, -1, 12, 11, 14, 13, 10,  5,  2,  3
0x4B29D8  [16]u8	?? static b8 array that seems to determine which button inputs make it to the analog button array at 0xEC8840
			- 1,  0,  0,  0,  1,  0,  0,  0,  1,  0,  0,  1,  1,  1,  1,  0
0x4B29E8  [?]CONTROL_MAP_DEF_FUNC		data used to translate FUNCTION string in control map file into actual control map values
0x4B2AF0  [?]CONTROL_MAP_DEF_INPUT		data used to translate joystick axis input string (X, Y, etc.) in control map file into actual control map values
0x4B2B28  [?]CONTROL_MAP_DEF_INPUT		data used to translate joystick button input string in control map file into actual control map values
0x4B2BD0  [?]CONTROL_MAP_DEF_INPUT		data used to translate keyboard input string in control map file into actual control map values


0x4D55D4  BOOL	seems to be a flag set when using racing wheel


0x4D5E20  int		number of mapped joystick inputs
0x4D5E24  int		number of mapped mouse inputs
0x4D5E28  int		number of mapped keyboard inputs
0x4D5E30  [4]f32	axis-type joystick/gamepad inputs
0x4D5E40  [4]f32	axis-type mouse inputs
0x4D5E50  [4]f32	axis-type keyboard inputs
0x4D5E80  [15]f32	button-type joystick/gamepad inputs
0x4D5EBC  [15]f32	button-type mouse inputs
0x4D5EF8  [15]f32	button-type keyboard inputs
- these are where the control map inputs go after translation, affecting only race inputs
- see AxisInput and ButtonInput below for index meanings
- even though button-type inputs are f32, the values are always 0 or 1
- combined into 'final' mapped inputs (0xEC8810 block)
- button-type arrays actually 16 with unused last field, i think


0x4D5FC0  CONTROL_MAP[65]	for joystick, inputs will be read into 0x4D5E30 and 0x4D5E80
0x4D6518  CONTROL_MAP[65]	for mouse, inputs will be read into 0x4D5E40 and 0x4D5EBC
0x4D6828  CONTROL_MAP[65]	for keyboard, inputs will be read into 0x4D5E50 and 0x4D5EF8
- where the actual mappings are stored after being loaded from control.map or w/e
- seems like there is no bounds checking when loading in input mappings?? (need to confirm)
- all arrays are 0x30C bytes long


0x4D6B3C - active joystick index
	i.e. yes, there is space allocated for several joysticks, even though only one is used


0x4D6B40  BOOL	BtnAcceptJustOn_Menu
0x4D6B44  BOOL	BtnCancelJustOn
0x4D6B48  BOOL	BtnAcceptNoMouseJustOn_Menu;  check accept input, but skip mouse check
0x4D6B4C  BOOL	BtnAcceptJustOff_RaceEnd
0x4D6B50  BOOL	BtnCancelJustOff
0x4D6824  BOOL	BtnAcceptOn_Menu
0x4D5FB8  BOOL	BtnAcceptOff_RaceEnd
0x4D6300  BOOL	BtnCancelOn
0x4D6304  BOOL	BtnCancelOff
0x4D6308  BOOL	BtnAcceptNoMouseOn_Menu;  check accept input, but skip mouse check
- hardcoded checks separate from the menu & race blobs, used for navigation in some places
- not sure exactly about the characterization here in terms of usage, but this is functionally what they do
- see bottom of ProcessInput


0x4D62D0  [6]f32	raw axis inputs of active joystick from previous frame, copied from 0xEC87C0 at start of ProcessInput
			seems to actually be 3 such arrays in series, one for each input type (see fn_407700)


0x4D6CE8  [28]BOOL	?? ffb 'channel's enabled?
			- values turned off in fn_40A0B0
			- index corresponds to FORCE_FEEDBACK_UNK+0x170
			- seems to correspond to FORCE_FEEDBACK_TRIGGER (same index fed into fn_40A190)
0x4B4940  [28]char*	force feedback trigger names; FORCE_FEEDBACK_TRIGGER enum based on this
0x4D6DA0  FORCE_FEEDBACK_UNK	?? array of 0x174-byte items related to force feedback, seems to be 6 items based on fn_40A160


'menu'(hang)-exclusive inputs, transferred/updated from 0xE98E90 bitsets  (fn_45A460)
0x50C908    [4]u32	input bitfield (raw), one for each player slot
0x50C918    [4]u32	input bitfield (just on), one for each player slot
0x50C970    [4]i32	axis x input (for menus?), -1/0/1, one for each player slot
0x50C980    [4]i32	axis y input (for menus?), -1/0/1, one for each player slot


0x50D568  [60]f32	raw axis input data; 0..47 is read from joysticks (6 per joystick), index 48 onward used for control map mouse inputs over 2 (i.e. index 51 onward)


0x50D658  [4]DIDEVICEINSTANCE	keyboard device data is written here when enumerated, 0x9D0 bytes total; see fn_486A10
				- code limits keyboard device count to 4, but sets it to 1 every iteration, i.e. it 
				  only ever uses space for 2 keyboards here, so this may actually be a 2-long array
0xECB240  [4]DIDEVICEINSTANCE	mouse device data is written here when enumerated, 0x9D0 bytes total; see fn_486A10
0xEC9EA0  [8]DIDEVICEINSTANCE	joystick device data is written here when enumerated, 0x13A0 bytes total; see fn_486A10
- byte totals based on memset in fn_485360, but when actually filled with data they seem like they could be 
  a lot more unless i'm not understanding how ddi stuff is filled

		
0x50E028  int[0x210]		raw btn input (on?) durations in ms, END 50E868; see input table at bottom
0x50E868  int[0x210]		raw btn input JustOn (or On?), END 50F0A8; see input table at bottom
0x50F0A8  AXIS_CONFIG[60]	?? corresponds with 0x50D568 array, but only up to 52-ish seems to be used; END 50F648  (fn_4855C0)
				refs in fn_4856E0, fn_486710
0x50F648  ??			?? mouse-related, see fn_486710
0x50F658  ??			?? mouse-related, see fn_486710
0x50F668  int[0x210]		raw btn input frames on, END 50FEA8; see input table at bottom
- raw input taken from dinput data with minimal mapping
- device-level 'race' input (0x4D5E30 block) is mapped from this


0x50FEC8	int	joystick device count


this block gets ref'd directly by the Test input handling code
0xE98E80    [4]f32	analog y axis, one for each player slot
0xE98E90    [4]u32	input bitfield (raw), one for each player slot; what each bit for these represents currently unknown
0xE98EA0    [4]f32	analog x axis, one for each player slot
0xE98EB0    [4]u32	input bitfield (just on), one for each player slot
0xE98EC0    [4]u32	input bitfield (just off), one for each player slot
- aka 'packed inputs'
- converted to from mapped 'race' inputs (0xEC8810 block), going through 'menu buffer' (0xE98EE0 block)
- HandleRaceInputs_46BEC0 suggests these are only 2 players, but space is made for 2 more


0xE98EE0  i16		menu buffer axis x
0xE98EE2  i16		menu buffer axis y
0xE98EE4  [16]u8	menu buffer buttons
0xE98EF4  ?i32		unk/unused menu buffer field; total size 24 bytes per player
- aka 'packing buffer'
- used as buffer for a translation layer between the mapping-processed inputs and the E98E80 etc. bitfields, i.e. packed inputs
- i.e. 'final' inputs get mapped to here, then the bitfields read from here as they're being built
- axis values seem to only range from -256 to 256; so basically they use an extra byte just for a single extra bit for one extra value???
- but in practice the values are meant to be -100 to 100, above is just a hard cap in the case of stacking inputs
- also button array immediately following in memory
- these 3 repeat 3 more times, for total of 4 players, ending at 0xE98F40


0xEC8790  ??		something mouse-related used when interpreting control mapped mouse inputs over 2
0xEC87C0  [6]f32	axis inputs for active joystick read from raw axis data at the start of ProcessInput, with basic filtering; copied to 0x4D62D0
			seems to actually be 3 such arrays in series, one for each input type (see fn_407700)
0xEC87D8  ??		seems to be where mouse x/y/wheel? movement is stored, before being used later when translating control map


0xEC8810  [15]u8	finalized button-type digital inputs; see code at 0x405883
0xEC8820  ??		?? ref in fn_46BEC0
0xEC8830  [4]f32	finalized axis-type analog inputs; see code at 0x405791
0xEC8840  [15]f32	finalized button-type analog inputs
0xEC8880  ??
0xEC88A0  [15]f32?	finalized button-type inputs - hold durations
0xEC88E0 - 0xFF-byte array on input state, made by calling fn_485880 (ReadKey) on keycodes <256
- writing to these after ProcessInput is done will change the driving output
- see AxisInput and ButtonInput below for index meanings
- somewhere between EC8810 and EC88E0 is the setting for invert axis, and probably other settings
	- found by zeroing out the whole block including undef'd parts during cam7 dev (lol)
	- address of that one setting is EC8888, block of -something- starts EC8880
- button-type arrays may actually be 15 items; seemingly unrelated refs sighted on 'in-between' addresses, e.g. 0xEC887C


0xECA0E4	joystick LPDIRECTINPUTDEVICEA; actually seems to be an array of 157*4-byte items, and
		this const is just the offset of the dinput device pointer for the first item



FUNCTIONS

fn_404DD0 - fn ProcessInput() void
fn_45A460 - fn Hang_PollInputForUI(player:i32) void
fn_45A7F0 - fn Hang_UpdateInputForUI(player:u32, bButtonOn:u32, value:u32) void
		- if bButtonOn==FALSE, set bits from value off, else
fn_485880	ReadInput(Index: i32, Counter: *i32)

fn_407EA0	CheckAcceptInput(SkipInputType: i32)
fn_407F80	CheckCancelInput(SkipInputType: i32)
- checks hardcoded offsets directly from raw input table via ReadInput
- generally called with -1 when polling for all inputs, but can be any value that isn't 0..2

fn_40A0B0	void __cdecl Unk_Input_ForceFeedback_DisableIdx_maybe__40A0B0(unsigned int UnkIndex)
		- may be 'init/reset' rather than 'disable'
fn_404230	BOOL __cdecl Unk_Input_ForceFeedback__404230(INPUT_FORCE_FEEDBACK *pForceFeedback)
		- runs some kind of callback function in a different structure
fn_40A160	int __cdecl Unk_Input_ForceFeedback_GetUnusedIndex_maybe__40A160(unsigned int a1)
		- checks for the first 0x4D6DA0 array index to have value at 0x170 greater than input, and returns it
fn_40A190	int __cdecl Unk_Input_ForceFeedback_CmpTriggerString_maybe__40A190(int ForceFeedbackIdx, unsigned int a2)
fn_40A120	void __cdecl Unk_Input_ForceFeedback_ResetAllChannels_maybe__40A120(BOOL a1)

fn_4040A0	int __cdecl Unk_Input_ForceFeedback__4040A0(INPUT_FORCE_FEEDBACK *pFFB, char *pTriggerName, int a3)
		- https://pied.nu/banned/historicalsource/jediacademypc/code/win32/FeelIt/FEELitIFR.h
		- IFCreateEffects - DLLAPI LPIFEELIT_EFFECT* IFRAPI IFRCreateEffects( HIFRPROJECT hProject, LPCSTR pObjectName, int *pNumEffects );
		- IFReleaseEffects - DLLAPI BOOL IFRAPI IFRReleaseEffects( HIFRPROJECT hProject, LPIFEELIT_EFFECT *pEffects );


DEFINITIONS

pub const AxisInput = enum(u8) {
    Thrust,
    Unk2, // not analog brake
    Steering,
    Pitch,
};

pub const ButtonInput = enum(u8) {
    CameraCycle,
    CameraLookBack,
    Brake,
    Acceleration,
    Boost,
    Slide,
    RollLeft,
    RollRight,
    Taunt,
    Repair,
    Pause,
    Unk12,
    Unk13,
    Unk14,
    Unk15,
};

INPUT BITFIELD
- semantic ones might be wrong, some stuff only updates in menus or w/e
- may need different labels for menu or racing context, but the actual translation from 'final' arrays appears to be the same both ways
	@00	accel
	@01	brake
	@02	camera cycle
	@03	look back
	@04	tilt left
	@05	tilt right
	@06	?? none?
	@07	repair
	@08	slide
	@09	pause
	@10	?? comes from button[13]; common theme for these 4 seems to be referencing them for debug functionality
	@11	?? comes from button[14]; for this block see: fn_445680
	@12	?? comes from button[11]
	@13	?? comes from button[12]
	@14	axis y up
	@15	axis y dn
	@16	axis x lt
	@17	axis x rt
	@18	axis x neutral
	@19	axis y neutral
	@20	axis x lt soft
	@21	axis x rt soft
	@22	axis y up soft
	@23	axis y dn soft
	@24
	@25
	@26
	@27
	@28
	@29
	@30
	@31

CONTROL_MAP STRUCT
0x00	i8	flags
		@00	output to analog
		@01	output to digital
		@02	input from analog data
		@03	input from digital data
		@04	treat analog value as positive (either this or following must be present or input will be ignored)
		@05	treat analog value as negative
		- in Input_ProcessInput_404DD0, if @0..7 == 0xFF, map reading will be skipped/ended
0x04	i32	input offset, will be translated into general input table index depending on type of control map
0x08	i32	output index
0x0C END

CONTROL_MAP_DEF_FUNC STRUCT
0x00	i32	output index
0x04	char*	string associated with map target; needs to be run through translate fn before comparing with string on file
0x08	i8	default flags
0x09 END
- 0x0C bytes with padding

CONTROL_MAP_DEF_INPUT STRUCT
0x00	i32	output index
0x04	char*	string associated with map input; may need to be run through translate fn
0x08 END

AXIS_CONFIG STRUCT
- static allocation starting 0x50F0A8
- seem to actually be floats, but asm uses non-fpu instructions in a lot of places
0x00	u32	flags
		@00	registered
		@01	enabled
0x04	i32	min value
0x08	i32	max value
0x0C	i32	center value, or some kind of calibration offset
0x10	i32	deadzone
0x14	f32	sensitivity?
0x18 END

FORCE_FEEDBACK_UNK STRUCT (of some kind, i think)
0x0000	i32	number of effects (fn_404230)
0x0004	ptr	ptr to array of effect ptrs (LPDIRECTINPUTEFFECT) (fn_404230, fn_4040A0)
0x0008	data	effect (DIEFFECT) (fn_4040A0); 0x34 long, not 0x38
0x003C	int	direction (pointed to by effect.rglDirection)
0x0040
0x0044
0x0048
0x004C
0x0050
0x0054
0x0058
0x005C
0x0060
0x0064
0x0068
0x006C
0x0070
0x0074
0x0078
0x007C
0x0080
0x0084
0x0088
0x008C
0x0090
0x0094
0x0098
0x009C
0x00A0
0x00A4
0x00A8
0x00AC
0x00B0
0x00B4
0x00B8
0x00BC	??	axes (pointed to by effect.rgdwAxes)
0x00C0
0x00C4
0x00C8
0x00CC
0x00D0
0x00D4
0x00D8
0x00DC
0x00E0
0x00E4
0x00E8
0x00EC
0x00F0
0x00F4
0x00F8
0x00FC
0x0100
0x0104
0x0108
0x010C
0x0110
0x0114
0x0118
0x011C
0x0120
0x0124
0x0128
0x012C
0x0130
0x0134
0x0138
0x013C	data	DIENVELOPE (fn_4046E0)
0x0150	ptr	?? see fn_4046E0
0x0154	u32	?? same type of value as 0x170 (fn_40A190)
0x0158	ptr	?? ptr to string, strcmp with 0x4B4940 array at index indicated by 0x154 (fn_40A190)
0x015C
0x0160
0x0164
0x0168
0x016C
0x0170	i32	?? 'game effect' index? index corresponds to array at 0x4D6CE8
		- seems to always be assigned in increasing order, see fn_40A160
0x0174 END

FORCE_FEEDBACK_EFFECT enum
- based on strings pointed to by array at 0x4B4940
- seems like they were modified from a list made for shadows of the empire
"GForce"
"EnginePullLeft"
"HeavySlideSlip"
"PitBob"
"Acceleration3"
"Acceleration3"
"TurboStart"
"StartBoost"
"EndBoost"
"SwampMuck"
"RollLeft"
"Repair"
"IceSlide"
"AirSlide"
"SecondaryWeapon"
"ActivateTow"
"ReleaseTow"
"AutoCenter"
"EnemyFire2"
"HardLanding"
"ObjCollision"
"EngineBlowOutLeft"
"Crashing"
"EngineRumble"
"PodWake"
"Shockwave"
"EngineFireLeft"
"Exploding"

GENERAL INPUT TABLE (prev. thought to be keyboard only)
- by index of arrays at 0x50E028, 0x50E868, 0x50F668
- combines digital inputs from all input types supported by the game
- although it makes space for several joystick and mouse devices, there is only space for one set of keyboard data
	- when reading input, the game just overwrites the keyboard state again when iterating over the keyboard devices
	- however, with mouse and joystick, it progresses to the next 'slot'
	- i.e. it actually does seem to read multiple joysticks at once, but in practice only refers to slot 0?
- keyboard inputs seem to be indexed via ascii scancodes
  - with 0x80 added for 'escaped' codes
  - e.g. 0x1D=LCtrl, 0x9D=RCtrl
  - apparently the indices for the keyboard range are dinput scancodes, see:
    https://gist.github.com/tracend/912308
  - also see: https://github.com/torvalds/linux/blob/master/include/uapi/linux/input-event-codes.h
0x000  000	
0x001  001	Esc
0x002  002	1
0x003  003	2
0x004  004	3
0x005  005	4
0x006  006	5
0x007  007	6
0x008  008	7
0x009  009	8
0x00A  010	9
0x00B  011	0
0x00C  012	-
0x00D  013	+
0x00E  014	Bksp
0x00F  015	Tab
0x010  016	Q
0x011  017	W
0x012  018	E
0x013  019	R
0x014  020	T
0x015  021	Y
0x016  022	U
0x017  023	I
0x018  024	O
0x019  025	P
0x01A  026	[
0x01B  027	]
0x01C  028	Enter
0x01D  029	LCtrl
0x01E  030	A
0x01F  031	S
0x020  032	D
0x021  033	F
0x022  034	G
0x023  035	H
0x024  036	J
0x025  037	K
0x026  038	L
0x027  039	:
0x028  040	"
0x029  041	~
0x02A  042	LShift
0x02B  043	?? \
0x02C  044	Z
0x02D  045	X
0x02E  046	C
0x02F  047	V
0x030  048	B
0x031  049	N
0x032  050	M
0x033  051	,
0x034  052	.
0x035  053	/
0x036  054	RShift
0x037  055	Num*
0x038  056	LAlt
0x039  057	Space
0x03A  058	CapsLock
0x03B  059	F1
0x03C  060	F2
0x03D  061	F3
0x03E  062	F4
0x03F  063	F5
0x040  064	F6
0x041  065	F7
0x042  066	F8
0x043  067	F9
0x044  068	F10
0x045  069	NumLock
0x046  070	ScrollLock
0x047  071	?? Num7
0x048  072	?? Num8
0x049  073	?? Num9
0x04A  074	?? Num-
0x04B  075	?? Num4
0x04C  076	?? Num5
0x04D  077	?? Num6
0x04E  078	?? Num+
0x04F  079	?? Num1
0x050  080	?? Num2
0x051  081	?? Num3
0x052  082	?? Num0
0x053  083	?? Num.
0x054  084	?? AltSysRq
0x055  085	
0x056  086	
0x057  087	F11
0x058  088	F12
0x059  089	
0x05A  090	
0x05B  091	
0x05C  092	
0x05D  093	
0x05E  094	
0x05F  095	
0x060  096	
0x061  097	
0x062  098	
0x063  099	
0x064  100	
0x065  101	
0x066  102	
0x067  103	
0x068  104	
0x069  105	
0x06A  106	
0x06B  107	
0x06C  108	
0x06D  109	
0x06E  110	
0x06F  111	
0x070  112	
0x071  113	
0x072  114	
0x073  115	
0x074  116	
0x075  117	
0x076  118	
0x077  119	
0x078  120	
0x079  121	
0x07A  122	
0x07B  123	
0x07C  124	
0x07D  125	
0x07E  126	
0x07F  127	
0x080  128	
0x081  129	
0x082  130	
0x083  131	
0x084  132	
0x085  133	
0x086  134	
0x087  135	
0x088  136	
0x089  137	
0x08A  138	
0x08B  139	
0x08C  140	
0x08D  141	
0x08E  142	
0x08F  143	
0x090  144	
0x091  145	
0x092  146	
0x093  147	
0x094  148	
0x095  149	
0x096  150	
0x097  151	
0x098  152	
0x099  153	
0x09A  154	
0x09B  155	
0x09C  156	NumEnter
0x09D  157	RCtrl
0x09E  158	
0x09F  159	
0x0A0  160	
0x0A1  161	
0x0A2  162	
0x0A3  163	
0x0A4  164	
0x0A5  165	
0x0A6  166	
0x0A7  167	
0x0A8  168	
0x0A9  169	
0x0AA  170	'fake' LShift
0x0AB  171	
0x0AC  172	
0x0AD  173	
0x0AE  174	
0x0AF  175	
0x0B0  176	
0x0B1  177	
0x0B2  178	
0x0B3  179	
0x0B4  180	
0x0B5  181	Num/
0x0B6  182	'fake' RShift
0x0B7  183	Ctrl-PrtScn
0x0B8  184	RAlt
0x0B9  185	
0x0BA  186	
0x0BB  187	
0x0BC  188	
0x0BD  189	
0x0BE  190	
0x0BF  191	
0x0C0  192	
0x0C1  193	
0x0C2  194	
0x0C3  195	
0x0C4  196	
0x0C5  197	
0x0C6  198	Ctrl-Break
0x0C7  199	Home
0x0C8  200	'Grey' Up
0x0C9  201	'Grey' PgUp
0x0CA  202	
0x0CB  203	'Grey' Left
0x0CC  204	
0x0CD  205	'Grey' Right
0x0CE  206	
0x0CF  207	'Grey' End
0x0D0  208	'Grey' Down
0x0D1  209	'Grey' PgDn
0x0D2  210	'Grey' Insert
0x0D3  211	'Grey' Delete
0x0D4  212	
0x0D5  213	
0x0D6  214	
0x0D7  215	
0x0D8  216	
0x0D9  217	
0x0DA  218	
0x0DB  219	
0x0DC  220	
0x0DD  221	
0x0DE  222	
0x0DF  223	
0x0E0  224	
0x0E1  225	
0x0E2  226	
0x0E3  227	
0x0E4  228	
0x0E5  229	
0x0E6  230	
0x0E7  231	
0x0E8  232	
0x0E9  233	
0x0EA  234	
0x0EB  235	
0x0EC  236	
0x0ED  237	
0x0EE  238	
0x0EF  239	
0x0F0  240	
0x0F1  241	
0x0F2  242	
0x0F3  243	
0x0F4  244	
0x0F5  245	
0x0F6  246	
0x0F7  247	
0x0F8  248	
0x0F9  249	
0x0FA  250	
0x0FB  251	
0x0FC  252	
0x0FD  253	
0x0FE  254	
0x0FF  255	
0x100  256	[8]JOYSTICK_DIGITAL_INPUTS
		0x00	[16]int buttons
		0x10	[4]DPAD
			0x00 left
			0x01 up
			0x02 right
			0x03 down
		0x20*8 = 0x100 = 0x200 END
		see Input_ReadJoysticksDigital_486340
		see fn_407F80; btn[1] ref
0x200  512	?? mouse0 left; start of mouse block, space for 4? mice, see Input_ReadMouse_486710
0x201  513	?? mouse0 right; also see fn_407F80
0x202  514	?? mouse0 middle
0x203  515	?? mouse0 back (button4?)
0x204  516	
0x205  517	
0x206  518	
0x207  519	
0x208  520	
0x209  521	
0x20A  522	
0x20B  523	
0x20C  524	
0x20D  525	
0x20E  526	
0x20F  527	
0x210 END	?? end of mouse block, see Input_ReadJoysticks_486340

CURSOR_STATE
- global struct at 0xEC8740
- see fn_4083D0 (pretty much everything set here), fn_4081C0, fn_415400
0x00	u32		flags
				@00  either position changed - @29 or @31
				@01  button state changed - accept (just on mouse only)
				@02  button state changed - cancel (just on)
				@28  either button state changed - @01 or @02
				@29  axis position changed
				@30  ?? seems unused but referenced;  see fn_415400
				@31  mouse position changed
0x04	u32?	?? button state
				@01  accept input just on (mouse only)
				@02  cancel input just on
0x08	u32?	?? button state prev
0x0C	i32		mouse x
0x10	i32		mouse x prev
0x14	i32		mouse y
0x18	i32		mouse y prev
0x1C	f32		?? axis 1
0x20	f32		?? axis 1 prev
0x24	f32		?? axis 2
0x28	f23		?? axis 2 prev
0x2C END


Input Codes

Shift	F4	4		(Watto's Shop) +1000 Truguts
Alt	H			? seems to show trugut cheat hint, not sure other conds to show
Ctrl	F10			? related to invincibility, seems to need debug menu enabled to work
Ctrl	F11			toggle that works in conjunction with -snafu, shows fps
I	F	L	Y	? possibly debug related, sets flag that is ref'd in Unk_Test_TerrainHandler_476EA0
RCtrl	N	K		(Vehicle Select) Jinn Reeso
LCtrl	C	Y		(Vehicle Select) Cy Yunga
RCtrl	LAlt			(Track Detail) Toggle Mirror mode, set cantina mirroring OFF
Ctrl	LAlt	RAlt		(Track Detail) Toggle Mirror mode, set cantina mirroring ON
Num*	T			Speedup cheat
F12				Screenshot
F5				taunt (cycle)
F6				taunt (random)
F7				show chat prompt
Ctrl	M			Toggle Mouse
Ctrl	J			Toggle Joystick
Ctrl	F			Toggle Force Feedback
Ctrl	Q			(Multiplayer) ??
ScrLk	Home			Unlock all pods and tracks cheat
