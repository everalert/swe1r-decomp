Essentially an interface for homogenously calling functionality on different types of entities/game logic


CONSTANTS

Entity Type IDs		'Test', 'Toss', 'Trig', 'Hang', 'Jdge', 'Scen', 'Elmo', 'Smok', 'cMan'
4BFEC0				pointer to entity definition vtable
4BFE98				entity definition vtable, pointed to by 4BFEC0
4BFD30				array of entity definition structs, pointed to by 4BFE98 entries
50C87C				sometimes checked as a barrier, seems to be always set to 0x00000000


FUNCTIONS

void 4508B0()
	executes funcptr 0x14 for all entities, will skip if entity flags 1<<24 or 1<<28 are on
void 450930()
	same as above but for 0x18
void 4509B0()
	same as above but for 0x1C
	and yes these 3 funcs have identical code other than the funcptr offset
void 450A30()
	same as above 3 functions for 0x20, but without 50C87C const check
450C50
	calls 0x24, can call for all entity types at once
450C00
	calls 0x24
450B30(const char* id, int index)
	seems to derive a pointer offset from an entity id and index

0x450850 - Entity_InitAll
- fn (magic: i32) void
- resets entity headers of all entities of type magic

0x450CE0 - Entity_InitEntityArray
- fn (magic: i32, count: i32, buffer: *anyopaque) i32
- assigns number of entities and address of entity array memory to manager of given type
- returns array size

0x447300 - Entity_InitEntityArrayAndLoad
- fn (magic: i32, count: i32) void
- allocates memory to entities for given type and count, then initializes the entities and calls Load event on them


ENTITY DATA STRUCT
0x28 length
+0x00 (u32)  entity type id
0x04	u16	default? entity header flags (fn_450850); used in 450DB0 as arg to 450C00 -> determines whether func 0x24 runs
0x06	??	TODO: confirm this is not actually the flags & that first 8 bytes of manager is not also an ENTITY_HEADER
		old notes systematically had the order of flags/index in header wrong
+0x08 (u32)  entity count
+0x0C (u32)  entity stride, e.g. 'Test' = 0x1F28 (vehicle state size)
+0x10 (ptr)  entity array address
+0x14 (ptr)  void funcptr(void* pEntity)
+0x18 (ptr)  void funcptr(void* pEntity)
+0x1C (ptr)  void funcptr(void* pEntity)
+0x20 (ptr)  void funcptr(void* pEntity)
  - functions 1-4 triggered once per frame in early engine update
  - all functions ran in sequence, and grouped by stage
  - e.g. all 0x14 functions ran on all entities, then all 0x18 functions ran on all entities, etc.
+0x24 (ptr)  void funcptr(void* pEntity, keyword: *u32, u32 arg3);  ref in 450C00
  - function 5 is used to handle individual events by passing in a magic word
  - both global ('Aloc', ..) and type-specific ('Shak', ..) events
  - arg2 = ptr to event payload, head of payload is always u32 event magic ('Shak', etc.)
    - e.g. Jdge uses this to assume you're pointing to somewhere in the Jdge struct and offset from there
    - e.g. cMan uses dedicated struct to pass in camera shake params
  - arg3 seems to just be the same as arg2 (batch event callers just place the payload ptr in both)
    - TODO: check if there is actually an arg3 or just decomp error


ENTITY HEADER
0x00	u32	entity type id/magic
0x04	i16	entity index
0x06	u16	entity flags


ENTITY FLAGS
see: fn_450850, fn_450DB0, fn_42A110
Seems to be used to control execution flow of entity-related meta functions
	should be remapped to 0..15, just cbf rn
	@16  ???	sometimes on for Test entities
	@17
	@18
	@19
	@20  ???	sometimes on for Test entities
	@21  ???	sometimes on for Test entities
	@22
	@23
	@24	??	Queue 'Free'; fn_4509B0, prevent 0x1C if on; fn_450E30, prevent 0x24 'Free' if off
			seems to indicate generally that the entity is 'available'; see fn_450D20, fn_42A110, fn_450AA0
	@25
	@26
	@27
	@28  ???	seems to indicate 'Slep' status, see 
			fn_4509B0, prevent 0x1C if on
			fn_450E30, turned on if 0x24 'Free' runs
			fn_454A30 scen0x24, turned on if 'Slep' runs, and off if 'Wake' runs
			fn_445680
	@29
	@30
	@31


ENTITY NOTES

entities listed here are in order of the managers in game memory

General notes
	- total size of all entities, 1 of each : 0x4370/17264 bytes
		- i.e. mapping dif 1bit->32bits = 0x21B/539 bytes header
	- entity get processed by type in order of the labels written below, in the case of mass calls
	- meaning engine state is processed first, and cMan (camera?) last

'Test'
- actual state of pods used in the race simulation

'Toss'
- dust trail pieces

'Trig'
- terrain/surface tag handling

'Hang'
- 'manager' for the non-race areas of the game
- watto's shop, hangar, etc.
- drawing menus

'Jdge'
- 'manager' for the in-race part of the game
- handle non-simulation aspects of the race logic, e.g. lap completion, race state/phase, etc.

'Scen'
- seems to not actually be used on the pc version
- is also magic word for a model header/type, seems to correspond to cutscenes, possibly only used on console?

'Elmo'
- animations

'Smok'
- instances of flame effects (death explosion, engine fire, flamethrower)

'cMan'
- camera positioning, draw distance, fog, etc.
